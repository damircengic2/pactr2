//
//  UI_Pactr.swift
//
//  Created by Damir Cengic on Apr 25, 2018.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class UI_Pactr: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Symbols
    
    class func drawIllustrationEmpty(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 96, height: 91), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 96, height: 91), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 96, y: resizedFrame.height / 91)
        
        /// fishing
        do {
            context.saveGState()
            
            /// Fill 1
            let fill1 = UIBezierPath()
            fill1.move(to: CGPoint(x: 17, y: 8.5))
            fill1.addCurve(to: CGPoint(x: 8.5, y: 17), controlPoint1: CGPoint(x: 17, y: 13.19), controlPoint2: CGPoint(x: 13.19, y: 17))
            fill1.addCurve(to: CGPoint(x: 0, y: 8.5), controlPoint1: CGPoint(x: 3.81, y: 17), controlPoint2: CGPoint(x: 0, y: 13.19))
            fill1.addCurve(to: CGPoint(x: 8.5, y: 0), controlPoint1: CGPoint(x: 0, y: 3.81), controlPoint2: CGPoint(x: 3.81, y: 0))
            fill1.addCurve(to: CGPoint(x: 17, y: 8.5), controlPoint1: CGPoint(x: 13.19, y: 0), controlPoint2: CGPoint(x: 17, y: 3.81))
            fill1.close()
            fill1.move(to: CGPoint(x: 17, y: 8.5))
            context.saveGState()
            context.translateBy(x: 15, y: 0)
            fill1.usesEvenOddFillRule = true
            UIColor(hue: 0.581, saturation: 0.213, brightness: 0.718, alpha: 1).setFill()
            fill1.fill()
            context.restoreGState()
            
            /// Fill 2
            let fill2 = UIBezierPath()
            fill2.move(to: CGPoint(x: 42.45, y: 17.99))
            fill2.addLine(to: CGPoint(x: 29.41, y: 17.23))
            fill2.addLine(to: CGPoint(x: 23.25, y: 6.71))
            fill2.addLine(to: CGPoint(x: 28.79, y: 12.21))
            fill2.addLine(to: CGPoint(x: 29.5, y: 8.68))
            fill2.addCurve(to: CGPoint(x: 25.1, y: 2.09), controlPoint1: CGPoint(x: 30.12, y: 5.65), controlPoint2: CGPoint(x: 28.15, y: 2.7))
            fill2.addLine(to: CGPoint(x: 15.28, y: 0.11))
            fill2.addCurve(to: CGPoint(x: 8.64, y: 4.5), controlPoint1: CGPoint(x: 12.23, y: -0.5), controlPoint2: CGPoint(x: 9.25, y: 1.47))
            fill2.addLine(to: CGPoint(x: 4.74, y: 23.85))
            fill2.addCurve(to: CGPoint(x: 7, y: 32.85), controlPoint1: CGPoint(x: 4.1, y: 27.04), controlPoint2: CGPoint(x: 4.93, y: 30.34))
            fill2.addCurve(to: CGPoint(x: 13.38, y: 36.62), controlPoint1: CGPoint(x: 8.63, y: 34.83), controlPoint2: CGPoint(x: 10.89, y: 36.15))
            fill2.addLine(to: CGPoint(x: 4.53, y: 36.62))
            fill2.addCurve(to: CGPoint(x: 0, y: 41.13), controlPoint1: CGPoint(x: 2.03, y: 36.62), controlPoint2: CGPoint(x: 0, y: 38.64))
            fill2.addCurve(to: CGPoint(x: 4.53, y: 45.63), controlPoint1: CGPoint(x: 0, y: 43.61), controlPoint2: CGPoint(x: 2.03, y: 45.63))
            fill2.addLine(to: CGPoint(x: 15.7, y: 45.63))
            fill2.addLine(to: CGPoint(x: 15.7, y: 67.5))
            fill2.addCurve(to: CGPoint(x: 20.23, y: 72), controlPoint1: CGPoint(x: 15.7, y: 69.98), controlPoint2: CGPoint(x: 17.73, y: 72))
            fill2.addCurve(to: CGPoint(x: 24.76, y: 67.5), controlPoint1: CGPoint(x: 22.73, y: 72), controlPoint2: CGPoint(x: 24.76, y: 69.98))
            fill2.addLine(to: CGPoint(x: 24.76, y: 45.63))
            fill2.addLine(to: CGPoint(x: 26.59, y: 45.63))
            fill2.addCurve(to: CGPoint(x: 31.12, y: 41.13), controlPoint1: CGPoint(x: 29.09, y: 45.63), controlPoint2: CGPoint(x: 31.12, y: 43.61))
            fill2.addCurve(to: CGPoint(x: 27.73, y: 36.77), controlPoint1: CGPoint(x: 31.12, y: 39.03), controlPoint2: CGPoint(x: 29.68, y: 37.28))
            fill2.addLine(to: CGPoint(x: 34.92, y: 36.77))
            fill2.addLine(to: CGPoint(x: 34.92, y: 57.19))
            fill2.addCurve(to: CGPoint(x: 39.45, y: 61.69), controlPoint1: CGPoint(x: 34.92, y: 59.68), controlPoint2: CGPoint(x: 36.95, y: 61.69))
            fill2.addCurve(to: CGPoint(x: 43.98, y: 57.19), controlPoint1: CGPoint(x: 41.96, y: 61.69), controlPoint2: CGPoint(x: 43.98, y: 59.68))
            fill2.addLine(to: CGPoint(x: 43.98, y: 32.27))
            fill2.addCurve(to: CGPoint(x: 42.78, y: 29.22), controlPoint1: CGPoint(x: 43.98, y: 31.09), controlPoint2: CGPoint(x: 43.53, y: 30.02))
            fill2.addCurve(to: CGPoint(x: 41.78, y: 29.23), controlPoint1: CGPoint(x: 42.45, y: 29.24), controlPoint2: CGPoint(x: 42.12, y: 29.25))
            fill2.addLine(to: CGPoint(x: 26.73, y: 28.35))
            fill2.addCurve(to: CGPoint(x: 23.27, y: 27.77), controlPoint1: CGPoint(x: 25.09, y: 28.25), controlPoint2: CGPoint(x: 24.35, y: 28.29))
            fill2.addCurve(to: CGPoint(x: 20.65, y: 24.63), controlPoint1: CGPoint(x: 21.99, y: 27.15), controlPoint2: CGPoint(x: 21.03, y: 26))
            fill2.addLine(to: CGPoint(x: 16.73, y: 10.49))
            fill2.addLine(to: CGPoint(x: 23.91, y: 22.74))
            fill2.addCurve(to: CGPoint(x: 26.95, y: 24.6), controlPoint1: CGPoint(x: 24.55, y: 23.83), controlPoint2: CGPoint(x: 25.69, y: 24.53))
            fill2.addLine(to: CGPoint(x: 42, y: 25.48))
            fill2.addCurve(to: CGPoint(x: 45.99, y: 21.96), controlPoint1: CGPoint(x: 44.09, y: 25.6), controlPoint2: CGPoint(x: 45.87, y: 24.02))
            fill2.addCurve(to: CGPoint(x: 42.45, y: 17.99), controlPoint1: CGPoint(x: 46.12, y: 19.89), controlPoint2: CGPoint(x: 44.53, y: 18.11))
            fill2.close()
            fill2.move(to: CGPoint(x: 42.45, y: 17.99))
            context.saveGState()
            context.translateBy(x: 0, y: 19)
            fill2.usesEvenOddFillRule = true
            UIColor(hue: 0.581, saturation: 0.213, brightness: 0.718, alpha: 1).setFill()
            fill2.fill()
            context.restoreGState()
            
            /// Fill 3
            let fill3 = UIBezierPath()
            fill3.move(to: CGPoint(x: 39.19, y: 41.94))
            fill3.addCurve(to: CGPoint(x: 45.12, y: 42), controlPoint1: CGPoint(x: 44.72, y: 41.94), controlPoint2: CGPoint(x: 44.53, y: 41.92))
            fill3.addLine(to: CGPoint(x: 45.12, y: 5.79))
            fill3.addCurve(to: CGPoint(x: 46.74, y: 1.78), controlPoint1: CGPoint(x: 46.74, y: 5.07), controlPoint2: CGPoint(x: 47.41, y: 3.3))
            fill3.addCurve(to: CGPoint(x: 42.82, y: 0.26), controlPoint1: CGPoint(x: 46.08, y: 0.27), controlPoint2: CGPoint(x: 44.32, y: -0.41))
            fill3.addCurve(to: CGPoint(x: 0, y: 19.53), controlPoint1: CGPoint(x: 41.26, y: 0.96), controlPoint2: CGPoint(x: 2.47, y: 18.41))
            fill3.addCurve(to: CGPoint(x: 2.98, y: 24.75), controlPoint1: CGPoint(x: 1.64, y: 20.75), controlPoint2: CGPoint(x: 2.75, y: 22.62))
            fill3.addLine(to: CGPoint(x: 39.19, y: 8.46))
            fill3.addLine(to: CGPoint(x: 39.19, y: 41.94))
            fill3.close()
            fill3.move(to: CGPoint(x: 39.19, y: 41.94))
            context.saveGState()
            context.translateBy(x: 46, y: 15)
            fill3.usesEvenOddFillRule = true
            UIColor(hue: 0.581, saturation: 0.213, brightness: 0.718, alpha: 1).setFill()
            fill3.fill()
            context.restoreGState()
            
            /// Fill 4
            let fill4 = UIBezierPath()
            fill4.move(to: CGPoint(x: 28.99, y: 0))
            fill4.addLine(to: CGPoint(x: 3.01, y: 0))
            fill4.addCurve(to: CGPoint(x: 0, y: 3), controlPoint1: CGPoint(x: 1.35, y: 0), controlPoint2: CGPoint(x: 0, y: 1.34))
            fill4.addCurve(to: CGPoint(x: 3.01, y: 6), controlPoint1: CGPoint(x: 0, y: 4.66), controlPoint2: CGPoint(x: 1.35, y: 6))
            fill4.addLine(to: CGPoint(x: 28.99, y: 6))
            fill4.addCurve(to: CGPoint(x: 32, y: 3), controlPoint1: CGPoint(x: 30.65, y: 6), controlPoint2: CGPoint(x: 32, y: 4.66))
            fill4.addCurve(to: CGPoint(x: 28.99, y: 0), controlPoint1: CGPoint(x: 32, y: 1.34), controlPoint2: CGPoint(x: 30.65, y: 0))
            fill4.close()
            fill4.move(to: CGPoint(x: 28.99, y: 0))
            context.saveGState()
            context.translateBy(x: 62, y: 61)
            fill4.usesEvenOddFillRule = true
            UIColor(hue: 0.581, saturation: 0.213, brightness: 0.718, alpha: 1).setFill()
            fill4.fill()
            context.restoreGState()
            
            /// Fill 5
            let fill5 = UIBezierPath()
            fill5.move(to: CGPoint(x: 27, y: 3))
            fill5.addCurve(to: CGPoint(x: 24.41, y: 0.02), controlPoint1: CGPoint(x: 27, y: 1.47), controlPoint2: CGPoint(x: 25.87, y: 0.21))
            fill5.addCurve(to: CGPoint(x: 24.04, y: 0), controlPoint1: CGPoint(x: 24.29, y: 0.01), controlPoint2: CGPoint(x: 24.17, y: 0))
            fill5.addLine(to: CGPoint(x: 2.96, y: 0))
            fill5.addCurve(to: CGPoint(x: 0, y: 3), controlPoint1: CGPoint(x: 1.32, y: 0), controlPoint2: CGPoint(x: 0, y: 1.34))
            fill5.addCurve(to: CGPoint(x: 2.96, y: 6), controlPoint1: CGPoint(x: 0, y: 4.66), controlPoint2: CGPoint(x: 1.32, y: 6))
            fill5.addLine(to: CGPoint(x: 24.04, y: 6))
            fill5.addCurve(to: CGPoint(x: 27, y: 3), controlPoint1: CGPoint(x: 25.68, y: 6), controlPoint2: CGPoint(x: 27, y: 4.66))
            fill5.close()
            fill5.move(to: CGPoint(x: 27, y: 3))
            context.saveGState()
            context.translateBy(x: 51, y: 70)
            fill5.usesEvenOddFillRule = true
            UIColor(hue: 0.581, saturation: 0.213, brightness: 0.718, alpha: 1).setFill()
            fill5.fill()
            context.restoreGState()
            
            /// Fill 6
            let fill6 = UIBezierPath()
            fill6.move(to: CGPoint(x: 24.04, y: 0))
            fill6.addLine(to: CGPoint(x: 2.96, y: 0))
            fill6.addCurve(to: CGPoint(x: 0, y: 3), controlPoint1: CGPoint(x: 1.32, y: 0), controlPoint2: CGPoint(x: 0, y: 1.34))
            fill6.addCurve(to: CGPoint(x: 2.96, y: 6), controlPoint1: CGPoint(x: 0, y: 4.66), controlPoint2: CGPoint(x: 1.32, y: 6))
            fill6.addLine(to: CGPoint(x: 24.04, y: 6))
            fill6.addCurve(to: CGPoint(x: 27, y: 3), controlPoint1: CGPoint(x: 25.68, y: 6), controlPoint2: CGPoint(x: 27, y: 4.66))
            fill6.addCurve(to: CGPoint(x: 24.04, y: 0), controlPoint1: CGPoint(x: 27, y: 1.34), controlPoint2: CGPoint(x: 25.68, y: 0))
            fill6.close()
            fill6.move(to: CGPoint(x: 24.04, y: 0))
            context.saveGState()
            context.translateBy(x: 69, y: 80)
            fill6.usesEvenOddFillRule = true
            UIColor(hue: 0.581, saturation: 0.213, brightness: 0.718, alpha: 1).setFill()
            fill6.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawNewButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)
        
        /// ADD ICON BOTTOM
        do {
            context.saveGState()
            
            /// Oval
            let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 60, height: 60))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(oval.cgPath)
            context.addRect(oval.bounds.insetBy(dx: -18, dy: -22))
            context.clip(using: .evenOdd)
            context.translateBy(x: -79, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 79, y: 4)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 18 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.992, saturation: 0.406, brightness: 0.996, alpha: 0.34).cgColor)
            }
            UIColor.black.setFill()
            oval.fill()
            context.restoreGState()
            context.saveGState()
            oval.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.766, saturation: 0.994, brightness: 0.663, alpha: 1).cgColor,
                        UIColor(hue: 0.905, saturation: 0.85, brightness: 0.886, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 30, y: 0),
                end: CGPoint(x: 30, y: 58.62),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// +
            let layer = UIBezierPath()
            layer.move(to: CGPoint(x: 18.52, y: 11.27))
            layer.addLine(to: CGPoint(x: 11.15, y: 11.27))
            layer.addLine(to: CGPoint(x: 11.15, y: 19.09))
            layer.addLine(to: CGPoint(x: 7.33, y: 19.09))
            layer.addLine(to: CGPoint(x: 7.33, y: 11.27))
            layer.addLine(to: CGPoint(x: 0, y: 11.27))
            layer.addLine(to: CGPoint(x: 0, y: 7.79))
            layer.addLine(to: CGPoint(x: 7.33, y: 7.79))
            layer.addLine(to: CGPoint(x: 7.33, y: 0))
            layer.addLine(to: CGPoint(x: 11.15, y: 0))
            layer.addLine(to: CGPoint(x: 11.15, y: 7.79))
            layer.addLine(to: CGPoint(x: 18.52, y: 7.79))
            layer.addLine(to: CGPoint(x: 18.52, y: 11.27))
            layer.close()
            layer.move(to: CGPoint(x: 18.52, y: 11.27))
            context.saveGState()
            context.translateBy(x: 21, y: 20)
            layer.usesEvenOddFillRule = true
            UIColor.white.setFill()
            layer.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawNextStepButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 375, height: 60), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 375, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 375, y: resizedFrame.height / 60)
        
        /// BOTTOM BAR
        do {
            context.saveGState()
            
            /// BAR BG
            let bARBG = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 375, height: 60))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(bARBG.cgPath)
            context.addRect(bARBG.bounds.insetBy(dx: -18, dy: -22))
            context.clip(using: .evenOdd)
            context.translateBy(x: -394, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 394, y: -4)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 18 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.582, saturation: 0.671, brightness: 1, alpha: 0.15).cgColor)
            }
            UIColor.black.setFill()
            bARBG.fill()
            context.restoreGState()
            context.saveGState()
            bARBG.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.765, saturation: 0.994, brightness: 0.663, alpha: 1).cgColor,
                        UIColor(hue: 0.907, saturation: 0.846, brightness: 0.894, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 375, y: 0),
                end: CGPoint(x: 0, y: 60),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// Next step
            let nextStep = NSMutableAttributedString(string: "Next step")
            nextStep.addAttribute(.font, value: UIFont(name: "Lato-Bold", size: 18)!, range: NSRange(location: 0, length: nextStep.length))
            nextStep.addAttribute(.foregroundColor, value: UIColor.white, range: NSRange(location: 0, length: nextStep.length))
            context.saveGState()
            nextStep.draw(at: CGPoint(x: 148, y: 19))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawAddAvatar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 52, height: 52), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 52, height: 52), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 52, y: resizedFrame.height / 52)
        
        /// ADD ICON BOTTOM
        do {
            context.saveGState()
            
            /// Oval
            let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 52, height: 52))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addRect(oval.bounds.insetBy(dx: -38, dy: -42))
            context.clip(using: .evenOdd)
            context.translateBy(x: -111, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 111, y: 4)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 18 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.992, saturation: 0.406, brightness: 0.996, alpha: 0.34).cgColor)
            }
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.saveGState()
                oval.lineWidth = 2
                UIColor.black.setStroke()
                oval.stroke()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            context.saveGState()
            oval.lineWidth = 2
            context.beginPath()
            context.addPath(oval.cgPath)
            context.setLineWidth(oval.lineWidth)
            context.setLineCap(oval.lineCapStyle)
            context.setLineJoin(oval.lineJoinStyle)
            context.setMiterLimit(oval.miterLimit)
            context.replacePathWithStrokedPath()
            context.clip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.784, saturation: 0.964, brightness: 0.651, alpha: 1).cgColor,
                        UIColor(hue: 0.894, saturation: 0.849, brightness: 0.831, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 26, y: 0),
                end: CGPoint(x: 26, y: 52),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// +
            let layer = UIBezierPath()
            layer.move(to: CGPoint(x: 16, y: 10.03))
            layer.addLine(to: CGPoint(x: 9.63, y: 10.03))
            layer.addLine(to: CGPoint(x: 9.63, y: 17))
            layer.addLine(to: CGPoint(x: 6.33, y: 17))
            layer.addLine(to: CGPoint(x: 6.33, y: 10.03))
            layer.addLine(to: CGPoint(x: 0, y: 10.03))
            layer.addLine(to: CGPoint(x: 0, y: 6.94))
            layer.addLine(to: CGPoint(x: 6.33, y: 6.94))
            layer.addLine(to: CGPoint(x: 6.33, y: 0))
            layer.addLine(to: CGPoint(x: 9.63, y: 0))
            layer.addLine(to: CGPoint(x: 9.63, y: 6.94))
            layer.addLine(to: CGPoint(x: 16, y: 6.94))
            layer.addLine(to: CGPoint(x: 16, y: 10.03))
            layer.close()
            layer.move(to: CGPoint(x: 16, y: 10.03))
            context.saveGState()
            context.translateBy(x: 18, y: 17)
            layer.usesEvenOddFillRule = true
            context.saveGState()
            layer.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.811, saturation: 0.898, brightness: 0.818, alpha: 1).cgColor,
                        UIColor(hue: 0.873, saturation: 0.868, brightness: 0.741, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 8, y: 0),
                end: CGPoint(x: 8, y: 17),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawLabel(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 43, height: 19), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 43, height: 19), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 43, y: resizedFrame.height / 19)
        
        /// Name
        let name = NSMutableAttributedString(string: "Name")
        name.addAttribute(.font, value: UIFont(name: "Lato-Bold", size: 16)!, range: NSRange(location: 0, length: name.length))
        name.addAttribute(.foregroundColor, value: UIColor(hue: 0.581, saturation: 0.21, brightness: 0.717, alpha: 1), range: NSRange(location: 0, length: name.length))
        context.saveGState()
        name.draw(at: CGPoint.zero)
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawTitleH1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 218, height: 25), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 218, height: 25), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 218, y: resizedFrame.height / 25)
        
        /// Register a new accou
        let registerANewAccou = NSMutableAttributedString(string: "Register a new account")
        registerANewAccou.addAttribute(.font, value: UIFont(name: "Lato-Bold", size: 21)!, range: NSRange(location: 0, length: registerANewAccou.length))
        registerANewAccou.addAttribute(.foregroundColor, value: UIColor(hue: 0.627, saturation: 0.393, brightness: 0.42, alpha: 1), range: NSRange(location: 0, length: registerANewAccou.length))
        context.saveGState()
        registerANewAccou.draw(at: CGPoint.zero)
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawTextField(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 335, height: 68), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 335, height: 68), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 335, y: resizedFrame.height / 68)
        
        /// BG
        let bG = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 335, height: 68), cornerRadius: 4)
        context.saveGState()
        context.saveGState()
        context.beginPath()
        context.addPath(bG.cgPath)
        context.addRect(bG.bounds.insetBy(dx: -18, dy: -24))
        context.clip(using: .evenOdd)
        context.translateBy(x: -354, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 354, y: 6)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 18 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.581, saturation: 0.213, brightness: 0.718, alpha: 0.22).cgColor)
        }
        UIColor.black.setFill()
        bG.fill()
        context.restoreGState()
        UIColor.white.setFill()
        bG.fill()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawPactr_Logo(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 158, height: 181), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 158, height: 181), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 158, y: resizedFrame.height / 181)
        
        /// Pactr_Logo
        do {
            context.saveGState()
            
            /// Group
            do {
                context.saveGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 46.99, y: 0.19))
                shape.addCurve(to: CGPoint(x: 46.99, y: 0), controlPoint1: CGPoint(x: 46.99, y: 0.13), controlPoint2: CGPoint(x: 46.99, y: 0.07))
                shape.addCurve(to: CGPoint(x: 9.86, y: 0), controlPoint1: CGPoint(x: 34.61, y: 0), controlPoint2: CGPoint(x: 22.24, y: 0))
                shape.addCurve(to: CGPoint(x: 1.29, y: 0), controlPoint1: CGPoint(x: 7, y: 0), controlPoint2: CGPoint(x: 4.15, y: -0))
                shape.addCurve(to: CGPoint(x: 0.01, y: 1.11), controlPoint1: CGPoint(x: 0.57, y: 0.01), controlPoint2: CGPoint(x: -0.1, y: 0.09))
                shape.addCurve(to: CGPoint(x: 1.84, y: 12.39), controlPoint1: CGPoint(x: 0.41, y: 4.91), controlPoint2: CGPoint(x: 0.49, y: 8.76))
                shape.addCurve(to: CGPoint(x: 5.2, y: 20.91), controlPoint1: CGPoint(x: 2.91, y: 15.25), controlPoint2: CGPoint(x: 3.81, y: 18.21))
                shape.addCurve(to: CGPoint(x: 17.93, y: 35.95), controlPoint1: CGPoint(x: 8.28, y: 26.87), controlPoint2: CGPoint(x: 12.53, y: 31.93))
                shape.addCurve(to: CGPoint(x: 33.86, y: 43.62), controlPoint1: CGPoint(x: 22.75, y: 39.54), controlPoint2: CGPoint(x: 28, y: 42.19))
                shape.addCurve(to: CGPoint(x: 43.44, y: 45), controlPoint1: CGPoint(x: 37.02, y: 44.38), controlPoint2: CGPoint(x: 40.17, y: 45.01))
                shape.addCurve(to: CGPoint(x: 79.29, y: 44.95), controlPoint1: CGPoint(x: 55.39, y: 44.97), controlPoint2: CGPoint(x: 67.34, y: 45))
                shape.addCurve(to: CGPoint(x: 89.38, y: 46.33), controlPoint1: CGPoint(x: 82.73, y: 44.94), controlPoint2: CGPoint(x: 86.1, y: 45.19))
                shape.addCurve(to: CGPoint(x: 94.73, y: 49.13), controlPoint1: CGPoint(x: 91.33, y: 47), controlPoint2: CGPoint(x: 93.13, y: 47.87))
                shape.addCurve(to: CGPoint(x: 101.39, y: 61.39), controlPoint1: CGPoint(x: 98.69, y: 52.26), controlPoint2: CGPoint(x: 100.82, y: 56.54))
                shape.addCurve(to: CGPoint(x: 98.7, y: 79.38), controlPoint1: CGPoint(x: 102.12, y: 67.57), controlPoint2: CGPoint(x: 102.01, y: 73.73))
                shape.addCurve(to: CGPoint(x: 89.42, y: 87.15), controlPoint1: CGPoint(x: 96.52, y: 83.11), controlPoint2: CGPoint(x: 93.43, y: 85.68))
                shape.addCurve(to: CGPoint(x: 81, y: 88.42), controlPoint1: CGPoint(x: 86.7, y: 88.15), controlPoint2: CGPoint(x: 83.84, y: 88.31))
                shape.addCurve(to: CGPoint(x: 69.24, y: 88.55), controlPoint1: CGPoint(x: 77.09, y: 88.58), controlPoint2: CGPoint(x: 73.16, y: 88.54))
                shape.addCurve(to: CGPoint(x: 23.86, y: 88.63), controlPoint1: CGPoint(x: 54.11, y: 88.58), controlPoint2: CGPoint(x: 38.98, y: 88.6))
                shape.addCurve(to: CGPoint(x: 15.97, y: 90.17), controlPoint1: CGPoint(x: 21.14, y: 88.64), controlPoint2: CGPoint(x: 18.53, y: 89.16))
                shape.addCurve(to: CGPoint(x: 7.55, y: 95.6), controlPoint1: CGPoint(x: 12.78, y: 91.42), controlPoint2: CGPoint(x: 10.01, y: 93.23))
                shape.addCurve(to: CGPoint(x: 1.46, y: 105.24), controlPoint1: CGPoint(x: 4.71, y: 98.32), controlPoint2: CGPoint(x: 2.76, y: 101.59))
                shape.addCurve(to: CGPoint(x: 0.16, y: 114.42), controlPoint1: CGPoint(x: 0.41, y: 108.19), controlPoint2: CGPoint(x: 0.17, y: 111.33))
                shape.addCurve(to: CGPoint(x: 0.13, y: 161.77), controlPoint1: CGPoint(x: 0.1, y: 130.2), controlPoint2: CGPoint(x: 0.13, y: 145.99))
                shape.addCurve(to: CGPoint(x: 0.1, y: 178.84), controlPoint1: CGPoint(x: 0.13, y: 167.46), controlPoint2: CGPoint(x: 0.11, y: 173.15))
                shape.addCurve(to: CGPoint(x: 1.52, y: 180.27), controlPoint1: CGPoint(x: 0.1, y: 180.1), controlPoint2: CGPoint(x: 0.25, y: 180.25))
                shape.addCurve(to: CGPoint(x: 4.19, y: 180.27), controlPoint1: CGPoint(x: 2.41, y: 180.28), controlPoint2: CGPoint(x: 3.3, y: 180.27))
                shape.addCurve(to: CGPoint(x: 32.12, y: 180.23), controlPoint1: CGPoint(x: 13.5, y: 180.25), controlPoint2: CGPoint(x: 22.81, y: 180.22))
                shape.addCurve(to: CGPoint(x: 39.27, y: 179.26), controlPoint1: CGPoint(x: 34.56, y: 180.24), controlPoint2: CGPoint(x: 36.98, y: 180))
                shape.addCurve(to: CGPoint(x: 45.73, y: 176.43), controlPoint1: CGPoint(x: 41.5, y: 178.54), controlPoint2: CGPoint(x: 43.66, y: 177.53))
                shape.addCurve(to: CGPoint(x: 54.89, y: 167.71), controlPoint1: CGPoint(x: 49.57, y: 174.39), controlPoint2: CGPoint(x: 52.57, y: 171.36))
                shape.addCurve(to: CGPoint(x: 58.05, y: 160.76), controlPoint1: CGPoint(x: 56.26, y: 165.55), controlPoint2: CGPoint(x: 57.58, y: 163.34))
                shape.addCurve(to: CGPoint(x: 59.31, y: 153.44), controlPoint1: CGPoint(x: 58.49, y: 158.32), controlPoint2: CGPoint(x: 59.23, y: 155.89))
                shape.addCurve(to: CGPoint(x: 59.42, y: 135.62), controlPoint1: CGPoint(x: 59.51, y: 147.5), controlPoint2: CGPoint(x: 59.4, y: 141.56))
                shape.addCurve(to: CGPoint(x: 61.61, y: 133.47), controlPoint1: CGPoint(x: 59.43, y: 133.48), controlPoint2: CGPoint(x: 59.43, y: 133.51))
                shape.addCurve(to: CGPoint(x: 93.59, y: 133.03), controlPoint1: CGPoint(x: 72.27, y: 133.27), controlPoint2: CGPoint(x: 82.94, y: 134.02))
                shape.addCurve(to: CGPoint(x: 103.67, y: 131.98), controlPoint1: CGPoint(x: 96.95, y: 132.72), controlPoint2: CGPoint(x: 100.32, y: 132.38))
                shape.addCurve(to: CGPoint(x: 107.85, y: 131.16), controlPoint1: CGPoint(x: 105.08, y: 131.81), controlPoint2: CGPoint(x: 106.48, y: 131.51))
                shape.addCurve(to: CGPoint(x: 114.81, y: 129.17), controlPoint1: CGPoint(x: 110.19, y: 130.55), controlPoint2: CGPoint(x: 112.52, y: 129.92))
                shape.addCurve(to: CGPoint(x: 121.79, y: 126.61), controlPoint1: CGPoint(x: 117.17, y: 128.41), controlPoint2: CGPoint(x: 119.58, y: 127.71))
                shape.addCurve(to: CGPoint(x: 132, y: 120.89), controlPoint1: CGPoint(x: 125.28, y: 124.87), controlPoint2: CGPoint(x: 128.67, y: 122.92))
                shape.addCurve(to: CGPoint(x: 143.34, y: 110.45), controlPoint1: CGPoint(x: 136.46, y: 118.18), controlPoint2: CGPoint(x: 140.01, y: 114.42))
                shape.addCurve(to: CGPoint(x: 150.53, y: 99.5), controlPoint1: CGPoint(x: 146.15, y: 107.08), controlPoint2: CGPoint(x: 148.59, y: 103.45))
                shape.addCurve(to: CGPoint(x: 152.94, y: 94.16), controlPoint1: CGPoint(x: 151.4, y: 97.75), controlPoint2: CGPoint(x: 152.24, y: 95.98))
                shape.addCurve(to: CGPoint(x: 154.66, y: 88.69), controlPoint1: CGPoint(x: 153.62, y: 92.38), controlPoint2: CGPoint(x: 154.16, y: 90.53))
                shape.addCurve(to: CGPoint(x: 156.68, y: 80.42), controlPoint1: CGPoint(x: 155.4, y: 85.95), controlPoint2: CGPoint(x: 156.19, y: 83.21))
                shape.addCurve(to: CGPoint(x: 157.58, y: 72.15), controlPoint1: CGPoint(x: 157.17, y: 77.7), controlPoint2: CGPoint(x: 157.32, y: 74.91))
                shape.addCurve(to: CGPoint(x: 157.75, y: 68.51), controlPoint1: CGPoint(x: 157.69, y: 70.94), controlPoint2: CGPoint(x: 157.74, y: 69.72))
                shape.addCurve(to: CGPoint(x: 157.73, y: 60.79), controlPoint1: CGPoint(x: 157.77, y: 65.94), controlPoint2: CGPoint(x: 157.84, y: 63.36))
                shape.addCurve(to: CGPoint(x: 156.81, y: 50.69), controlPoint1: CGPoint(x: 157.58, y: 57.41), controlPoint2: CGPoint(x: 157.6, y: 54.02))
                shape.addCurve(to: CGPoint(x: 155.85, y: 45.46), controlPoint1: CGPoint(x: 156.4, y: 48.97), controlPoint2: CGPoint(x: 156.34, y: 47.15))
                shape.addCurve(to: CGPoint(x: 153.18, y: 37.52), controlPoint1: CGPoint(x: 155.07, y: 42.78), controlPoint2: CGPoint(x: 154.05, y: 40.17))
                shape.addCurve(to: CGPoint(x: 148.83, y: 28.78), controlPoint1: CGPoint(x: 152.14, y: 34.39), controlPoint2: CGPoint(x: 150.51, y: 31.57))
                shape.addCurve(to: CGPoint(x: 140.32, y: 18.4), controlPoint1: CGPoint(x: 146.5, y: 24.91), controlPoint2: CGPoint(x: 143.57, y: 21.52))
                shape.addCurve(to: CGPoint(x: 128.36, y: 9.77), controlPoint1: CGPoint(x: 136.74, y: 14.95), controlPoint2: CGPoint(x: 132.78, y: 12.03))
                shape.addCurve(to: CGPoint(x: 122.02, y: 6.76), controlPoint1: CGPoint(x: 126.28, y: 8.7), controlPoint2: CGPoint(x: 124.17, y: 7.68))
                shape.addCurve(to: CGPoint(x: 116.17, y: 4.6), controlPoint1: CGPoint(x: 120.11, y: 5.95), controlPoint2: CGPoint(x: 118.13, y: 5.28))
                shape.addCurve(to: CGPoint(x: 112.92, y: 3.63), controlPoint1: CGPoint(x: 115.1, y: 4.23), controlPoint2: CGPoint(x: 114.01, y: 3.94))
                shape.addCurve(to: CGPoint(x: 108.63, y: 2.48), controlPoint1: CGPoint(x: 111.5, y: 3.23), controlPoint2: CGPoint(x: 110.08, y: 2.77))
                shape.addCurve(to: CGPoint(x: 102.32, y: 1.47), controlPoint1: CGPoint(x: 106.54, y: 2.07), controlPoint2: CGPoint(x: 104.43, y: 1.74))
                shape.addCurve(to: CGPoint(x: 91.3, y: 0.24), controlPoint1: CGPoint(x: 98.65, y: 1.01), controlPoint2: CGPoint(x: 94.98, y: 0.28))
                shape.addCurve(to: CGPoint(x: 46.99, y: 0.19), controlPoint1: CGPoint(x: 76.53, y: 0.1), controlPoint2: CGPoint(x: 61.76, y: 0.19))
                shape.close()
                shape.move(to: CGPoint(x: 46.99, y: 0.19))
                context.saveGState()
                context.translateBy(x: 0.1, y: 0.36)
                context.saveGState()
                shape.addClip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.871, saturation: 0.895, brightness: 0.486, alpha: 1).cgColor,
                            UIColor(hue: 0.929, saturation: 0.84, brightness: 0.933, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 0.47, y: 180.12),
                    end: CGPoint(x: 106, y: -3.25),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                /// Shape
                let shape2 = UIBezierPath()
                shape2.move(to: CGPoint(x: 46.99, y: 0.19))
                shape2.addCurve(to: CGPoint(x: 91.3, y: 0.24), controlPoint1: CGPoint(x: 61.76, y: 0.19), controlPoint2: CGPoint(x: 76.53, y: 0.1))
                shape2.addCurve(to: CGPoint(x: 102.32, y: 1.47), controlPoint1: CGPoint(x: 94.98, y: 0.28), controlPoint2: CGPoint(x: 98.65, y: 1.01))
                shape2.addCurve(to: CGPoint(x: 108.63, y: 2.48), controlPoint1: CGPoint(x: 104.43, y: 1.74), controlPoint2: CGPoint(x: 106.54, y: 2.07))
                shape2.addCurve(to: CGPoint(x: 112.92, y: 3.63), controlPoint1: CGPoint(x: 110.08, y: 2.77), controlPoint2: CGPoint(x: 111.5, y: 3.23))
                shape2.addCurve(to: CGPoint(x: 116.17, y: 4.6), controlPoint1: CGPoint(x: 114.01, y: 3.94), controlPoint2: CGPoint(x: 115.1, y: 4.23))
                shape2.addCurve(to: CGPoint(x: 122.02, y: 6.76), controlPoint1: CGPoint(x: 118.13, y: 5.28), controlPoint2: CGPoint(x: 120.11, y: 5.95))
                shape2.addCurve(to: CGPoint(x: 128.36, y: 9.77), controlPoint1: CGPoint(x: 124.17, y: 7.68), controlPoint2: CGPoint(x: 126.28, y: 8.7))
                shape2.addCurve(to: CGPoint(x: 140.32, y: 18.4), controlPoint1: CGPoint(x: 132.78, y: 12.03), controlPoint2: CGPoint(x: 136.74, y: 14.95))
                shape2.addCurve(to: CGPoint(x: 148.83, y: 28.78), controlPoint1: CGPoint(x: 143.57, y: 21.52), controlPoint2: CGPoint(x: 146.5, y: 24.91))
                shape2.addCurve(to: CGPoint(x: 153.18, y: 37.52), controlPoint1: CGPoint(x: 150.51, y: 31.57), controlPoint2: CGPoint(x: 152.14, y: 34.39))
                shape2.addCurve(to: CGPoint(x: 155.85, y: 45.46), controlPoint1: CGPoint(x: 154.05, y: 40.17), controlPoint2: CGPoint(x: 155.07, y: 42.78))
                shape2.addCurve(to: CGPoint(x: 156.81, y: 50.69), controlPoint1: CGPoint(x: 156.34, y: 47.15), controlPoint2: CGPoint(x: 156.4, y: 48.97))
                shape2.addCurve(to: CGPoint(x: 157.73, y: 60.79), controlPoint1: CGPoint(x: 157.6, y: 54.02), controlPoint2: CGPoint(x: 157.58, y: 57.41))
                shape2.addCurve(to: CGPoint(x: 157.75, y: 68.51), controlPoint1: CGPoint(x: 157.84, y: 63.36), controlPoint2: CGPoint(x: 157.77, y: 65.94))
                shape2.addCurve(to: CGPoint(x: 157.58, y: 72.15), controlPoint1: CGPoint(x: 157.74, y: 69.72), controlPoint2: CGPoint(x: 157.69, y: 70.94))
                shape2.addCurve(to: CGPoint(x: 156.68, y: 80.42), controlPoint1: CGPoint(x: 157.32, y: 74.91), controlPoint2: CGPoint(x: 157.17, y: 77.7))
                shape2.addCurve(to: CGPoint(x: 154.66, y: 88.69), controlPoint1: CGPoint(x: 156.19, y: 83.21), controlPoint2: CGPoint(x: 155.4, y: 85.95))
                shape2.addCurve(to: CGPoint(x: 152.94, y: 94.16), controlPoint1: CGPoint(x: 154.16, y: 90.53), controlPoint2: CGPoint(x: 153.62, y: 92.38))
                shape2.addCurve(to: CGPoint(x: 150.53, y: 99.5), controlPoint1: CGPoint(x: 152.24, y: 95.98), controlPoint2: CGPoint(x: 151.4, y: 97.75))
                shape2.addCurve(to: CGPoint(x: 143.34, y: 110.45), controlPoint1: CGPoint(x: 148.59, y: 103.45), controlPoint2: CGPoint(x: 146.15, y: 107.08))
                shape2.addCurve(to: CGPoint(x: 132, y: 120.89), controlPoint1: CGPoint(x: 140.01, y: 114.42), controlPoint2: CGPoint(x: 136.46, y: 118.18))
                shape2.addCurve(to: CGPoint(x: 121.79, y: 126.61), controlPoint1: CGPoint(x: 128.67, y: 122.92), controlPoint2: CGPoint(x: 125.28, y: 124.87))
                shape2.addCurve(to: CGPoint(x: 114.81, y: 129.17), controlPoint1: CGPoint(x: 119.58, y: 127.71), controlPoint2: CGPoint(x: 117.17, y: 128.41))
                shape2.addCurve(to: CGPoint(x: 107.85, y: 131.16), controlPoint1: CGPoint(x: 112.52, y: 129.92), controlPoint2: CGPoint(x: 110.19, y: 130.55))
                shape2.addCurve(to: CGPoint(x: 103.67, y: 131.98), controlPoint1: CGPoint(x: 106.48, y: 131.51), controlPoint2: CGPoint(x: 105.08, y: 131.81))
                shape2.addCurve(to: CGPoint(x: 93.59, y: 133.03), controlPoint1: CGPoint(x: 100.32, y: 132.38), controlPoint2: CGPoint(x: 96.95, y: 132.72))
                shape2.addCurve(to: CGPoint(x: 61.61, y: 133.47), controlPoint1: CGPoint(x: 82.94, y: 134.02), controlPoint2: CGPoint(x: 72.27, y: 133.27))
                shape2.addCurve(to: CGPoint(x: 59.42, y: 135.62), controlPoint1: CGPoint(x: 59.43, y: 133.51), controlPoint2: CGPoint(x: 59.43, y: 133.48))
                shape2.addCurve(to: CGPoint(x: 59.31, y: 153.44), controlPoint1: CGPoint(x: 59.4, y: 141.56), controlPoint2: CGPoint(x: 59.51, y: 147.5))
                shape2.addCurve(to: CGPoint(x: 58.05, y: 160.76), controlPoint1: CGPoint(x: 59.23, y: 155.89), controlPoint2: CGPoint(x: 58.49, y: 158.32))
                shape2.addCurve(to: CGPoint(x: 54.89, y: 167.71), controlPoint1: CGPoint(x: 57.58, y: 163.34), controlPoint2: CGPoint(x: 56.26, y: 165.55))
                shape2.addCurve(to: CGPoint(x: 45.73, y: 176.43), controlPoint1: CGPoint(x: 52.57, y: 171.36), controlPoint2: CGPoint(x: 49.57, y: 174.39))
                shape2.addCurve(to: CGPoint(x: 39.27, y: 179.26), controlPoint1: CGPoint(x: 43.66, y: 177.53), controlPoint2: CGPoint(x: 41.5, y: 178.54))
                shape2.addCurve(to: CGPoint(x: 32.12, y: 180.23), controlPoint1: CGPoint(x: 36.98, y: 180), controlPoint2: CGPoint(x: 34.56, y: 180.24))
                shape2.addCurve(to: CGPoint(x: 4.19, y: 180.27), controlPoint1: CGPoint(x: 22.81, y: 180.22), controlPoint2: CGPoint(x: 13.5, y: 180.25))
                shape2.addCurve(to: CGPoint(x: 1.52, y: 180.27), controlPoint1: CGPoint(x: 3.3, y: 180.27), controlPoint2: CGPoint(x: 2.41, y: 180.28))
                shape2.addCurve(to: CGPoint(x: 0.1, y: 178.84), controlPoint1: CGPoint(x: 0.25, y: 180.25), controlPoint2: CGPoint(x: 0.1, y: 180.1))
                shape2.addCurve(to: CGPoint(x: 0.13, y: 161.77), controlPoint1: CGPoint(x: 0.11, y: 173.15), controlPoint2: CGPoint(x: 0.13, y: 167.46))
                shape2.addCurve(to: CGPoint(x: 0.16, y: 114.42), controlPoint1: CGPoint(x: 0.13, y: 145.99), controlPoint2: CGPoint(x: 0.1, y: 130.2))
                shape2.addCurve(to: CGPoint(x: 1.46, y: 105.24), controlPoint1: CGPoint(x: 0.17, y: 111.33), controlPoint2: CGPoint(x: 0.41, y: 108.19))
                shape2.addCurve(to: CGPoint(x: 7.55, y: 95.6), controlPoint1: CGPoint(x: 2.76, y: 101.59), controlPoint2: CGPoint(x: 4.71, y: 98.32))
                shape2.addCurve(to: CGPoint(x: 15.97, y: 90.17), controlPoint1: CGPoint(x: 10.01, y: 93.23), controlPoint2: CGPoint(x: 12.78, y: 91.42))
                shape2.addCurve(to: CGPoint(x: 23.86, y: 88.63), controlPoint1: CGPoint(x: 18.53, y: 89.16), controlPoint2: CGPoint(x: 21.14, y: 88.64))
                shape2.addCurve(to: CGPoint(x: 69.24, y: 88.55), controlPoint1: CGPoint(x: 38.98, y: 88.6), controlPoint2: CGPoint(x: 54.11, y: 88.58))
                shape2.addCurve(to: CGPoint(x: 81, y: 88.42), controlPoint1: CGPoint(x: 73.16, y: 88.54), controlPoint2: CGPoint(x: 77.09, y: 88.58))
                shape2.addCurve(to: CGPoint(x: 89.42, y: 87.15), controlPoint1: CGPoint(x: 83.84, y: 88.31), controlPoint2: CGPoint(x: 86.7, y: 88.15))
                shape2.addCurve(to: CGPoint(x: 98.7, y: 79.38), controlPoint1: CGPoint(x: 93.43, y: 85.68), controlPoint2: CGPoint(x: 96.52, y: 83.11))
                shape2.addCurve(to: CGPoint(x: 101.39, y: 61.39), controlPoint1: CGPoint(x: 102.01, y: 73.73), controlPoint2: CGPoint(x: 102.12, y: 67.57))
                shape2.addCurve(to: CGPoint(x: 94.73, y: 49.13), controlPoint1: CGPoint(x: 100.82, y: 56.54), controlPoint2: CGPoint(x: 98.69, y: 52.26))
                shape2.addCurve(to: CGPoint(x: 89.38, y: 46.33), controlPoint1: CGPoint(x: 93.13, y: 47.87), controlPoint2: CGPoint(x: 91.33, y: 47))
                shape2.addCurve(to: CGPoint(x: 79.29, y: 44.95), controlPoint1: CGPoint(x: 86.1, y: 45.19), controlPoint2: CGPoint(x: 82.73, y: 44.94))
                shape2.addCurve(to: CGPoint(x: 43.44, y: 45), controlPoint1: CGPoint(x: 67.34, y: 45), controlPoint2: CGPoint(x: 55.39, y: 44.97))
                shape2.addCurve(to: CGPoint(x: 33.86, y: 43.62), controlPoint1: CGPoint(x: 40.17, y: 45.01), controlPoint2: CGPoint(x: 37.02, y: 44.38))
                shape2.addCurve(to: CGPoint(x: 17.93, y: 35.95), controlPoint1: CGPoint(x: 28, y: 42.19), controlPoint2: CGPoint(x: 22.75, y: 39.54))
                shape2.addCurve(to: CGPoint(x: 5.2, y: 20.91), controlPoint1: CGPoint(x: 12.53, y: 31.93), controlPoint2: CGPoint(x: 8.28, y: 26.87))
                shape2.addCurve(to: CGPoint(x: 1.84, y: 12.39), controlPoint1: CGPoint(x: 3.81, y: 18.21), controlPoint2: CGPoint(x: 2.91, y: 15.25))
                shape2.addCurve(to: CGPoint(x: 0.01, y: 1.11), controlPoint1: CGPoint(x: 0.49, y: 8.76), controlPoint2: CGPoint(x: 0.41, y: 4.91))
                shape2.addCurve(to: CGPoint(x: 1.29, y: 0), controlPoint1: CGPoint(x: -0.1, y: 0.09), controlPoint2: CGPoint(x: 0.57, y: 0.01))
                shape2.addCurve(to: CGPoint(x: 9.86, y: 0), controlPoint1: CGPoint(x: 4.15, y: -0), controlPoint2: CGPoint(x: 7, y: 0))
                shape2.addCurve(to: CGPoint(x: 46.99, y: 0), controlPoint1: CGPoint(x: 22.23, y: 0), controlPoint2: CGPoint(x: 34.61, y: 0))
                shape2.addCurve(to: CGPoint(x: 46.99, y: 0.19), controlPoint1: CGPoint(x: 46.99, y: 0.06), controlPoint2: CGPoint(x: 46.99, y: 0.12))
                shape2.close()
                shape2.move(to: CGPoint(x: 46.99, y: 0.19))
                context.saveGState()
                context.translateBy(x: 0.1, y: 0.36)
                shape2.usesEvenOddFillRule = true
                context.saveGState()
                shape2.addClip()
                context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                            UIColor(hue: 0.871, saturation: 0.895, brightness: 0.486, alpha: 1).cgColor,
                            UIColor(hue: 0.929, saturation: 0.84, brightness: 0.933, alpha: 1).cgColor,
                        ] as CFArray, locations: [0, 1])!,
                    start: CGPoint(x: 0.47, y: 180.12),
                    end: CGPoint(x: 106, y: -3.25),
                    options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                context.restoreGState()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Shape
            let shape3 = UIBezierPath()
            shape3.move(to: CGPoint(x: 150.37, y: 54.61))
            shape3.addCurve(to: CGPoint(x: 152.78, y: 49.23), controlPoint1: CGPoint(x: 151.23, y: 52.84), controlPoint2: CGPoint(x: 152.08, y: 51.06))
            shape3.addCurve(to: CGPoint(x: 154.5, y: 43.71), controlPoint1: CGPoint(x: 153.46, y: 47.43), controlPoint2: CGPoint(x: 154, y: 45.57))
            shape3.addCurve(to: CGPoint(x: 155, y: 41.84), controlPoint1: CGPoint(x: 154.66, y: 43.09), controlPoint2: CGPoint(x: 154.83, y: 42.47))
            shape3.addCurve(to: CGPoint(x: 84.99, y: 0), controlPoint1: CGPoint(x: 139.75, y: 18.35), controlPoint2: CGPoint(x: 114.29, y: 2.24))
            shape3.addCurve(to: CGPoint(x: 89.25, y: 1.02), controlPoint1: CGPoint(x: 86.42, y: 0.21), controlPoint2: CGPoint(x: 87.84, y: 0.53))
            shape3.addCurve(to: CGPoint(x: 94.59, y: 3.85), controlPoint1: CGPoint(x: 91.19, y: 1.7), controlPoint2: CGPoint(x: 92.99, y: 2.58))
            shape3.addCurve(to: CGPoint(x: 101.25, y: 16.21), controlPoint1: CGPoint(x: 98.55, y: 7), controlPoint2: CGPoint(x: 100.67, y: 11.32))
            shape3.addCurve(to: CGPoint(x: 98.56, y: 34.33), controlPoint1: CGPoint(x: 101.98, y: 22.43), controlPoint2: CGPoint(x: 101.86, y: 28.64))
            shape3.addCurve(to: CGPoint(x: 89.28, y: 42.16), controlPoint1: CGPoint(x: 96.38, y: 38.09), controlPoint2: CGPoint(x: 93.29, y: 40.68))
            shape3.addCurve(to: CGPoint(x: 80.87, y: 43.44), controlPoint1: CGPoint(x: 86.57, y: 43.17), controlPoint2: CGPoint(x: 83.7, y: 43.33))
            shape3.addCurve(to: CGPoint(x: 69.11, y: 43.57), controlPoint1: CGPoint(x: 76.95, y: 43.6), controlPoint2: CGPoint(x: 73.03, y: 43.56))
            shape3.addCurve(to: CGPoint(x: 23.75, y: 43.65), controlPoint1: CGPoint(x: 53.99, y: 43.6), controlPoint2: CGPoint(x: 38.87, y: 43.62))
            shape3.addCurve(to: CGPoint(x: 15.86, y: 45.2), controlPoint1: CGPoint(x: 21.03, y: 43.66), controlPoint2: CGPoint(x: 18.42, y: 44.18))
            shape3.addCurve(to: CGPoint(x: 7.44, y: 50.67), controlPoint1: CGPoint(x: 12.67, y: 46.46), controlPoint2: CGPoint(x: 9.91, y: 48.28))
            shape3.addCurve(to: CGPoint(x: 1.36, y: 60.39), controlPoint1: CGPoint(x: 4.61, y: 53.42), controlPoint2: CGPoint(x: 2.66, y: 56.71))
            shape3.addCurve(to: CGPoint(x: 0.06, y: 69.64), controlPoint1: CGPoint(x: 0.31, y: 63.36), controlPoint2: CGPoint(x: 0.07, y: 66.52))
            shape3.addCurve(to: CGPoint(x: 0.02, y: 117.35), controlPoint1: CGPoint(x: -0.01, y: 85.54), controlPoint2: CGPoint(x: 0.03, y: 101.45))
            shape3.addCurve(to: CGPoint(x: 0, y: 134.55), controlPoint1: CGPoint(x: 0.02, y: 123.09), controlPoint2: CGPoint(x: 0.01, y: 128.82))
            shape3.addCurve(to: CGPoint(x: 1.41, y: 135.99), controlPoint1: CGPoint(x: -0, y: 135.82), controlPoint2: CGPoint(x: 0.14, y: 135.98))
            shape3.addCurve(to: CGPoint(x: 4.09, y: 135.99), controlPoint1: CGPoint(x: 2.31, y: 136.01), controlPoint2: CGPoint(x: 3.2, y: 136))
            shape3.addCurve(to: CGPoint(x: 32.01, y: 135.96), controlPoint1: CGPoint(x: 13.4, y: 135.98), controlPoint2: CGPoint(x: 22.7, y: 135.95))
            shape3.addCurve(to: CGPoint(x: 39.15, y: 134.98), controlPoint1: CGPoint(x: 34.44, y: 135.96), controlPoint2: CGPoint(x: 36.87, y: 135.72))
            shape3.addCurve(to: CGPoint(x: 45.61, y: 132.12), controlPoint1: CGPoint(x: 41.38, y: 134.25), controlPoint2: CGPoint(x: 43.54, y: 133.23))
            shape3.addCurve(to: CGPoint(x: 54.76, y: 123.34), controlPoint1: CGPoint(x: 49.45, y: 130.07), controlPoint2: CGPoint(x: 52.45, y: 127.02))
            shape3.addCurve(to: CGPoint(x: 57.92, y: 116.34), controlPoint1: CGPoint(x: 56.13, y: 121.16), controlPoint2: CGPoint(x: 57.45, y: 118.94))
            shape3.addCurve(to: CGPoint(x: 59.19, y: 108.96), controlPoint1: CGPoint(x: 58.37, y: 113.88), controlPoint2: CGPoint(x: 59.1, y: 111.43))
            shape3.addCurve(to: CGPoint(x: 59.29, y: 91), controlPoint1: CGPoint(x: 59.39, y: 102.98), controlPoint2: CGPoint(x: 59.28, y: 96.99))
            shape3.addCurve(to: CGPoint(x: 61.49, y: 88.84), controlPoint1: CGPoint(x: 59.3, y: 88.84), controlPoint2: CGPoint(x: 59.3, y: 88.88))
            shape3.addCurve(to: CGPoint(x: 93.45, y: 88.39), controlPoint1: CGPoint(x: 72.14, y: 88.64), controlPoint2: CGPoint(x: 82.81, y: 89.39))
            shape3.addCurve(to: CGPoint(x: 103.53, y: 87.33), controlPoint1: CGPoint(x: 96.81, y: 88.07), controlPoint2: CGPoint(x: 100.17, y: 87.74))
            shape3.addCurve(to: CGPoint(x: 107.71, y: 86.5), controlPoint1: CGPoint(x: 104.94, y: 87.16), controlPoint2: CGPoint(x: 106.34, y: 86.86))
            shape3.addCurve(to: CGPoint(x: 114.66, y: 84.51), controlPoint1: CGPoint(x: 110.04, y: 85.89), controlPoint2: CGPoint(x: 112.37, y: 85.25))
            shape3.addCurve(to: CGPoint(x: 121.64, y: 81.92), controlPoint1: CGPoint(x: 117.02, y: 83.74), controlPoint2: CGPoint(x: 119.43, y: 83.03))
            shape3.addCurve(to: CGPoint(x: 131.85, y: 76.16), controlPoint1: CGPoint(x: 125.13, y: 80.17), controlPoint2: CGPoint(x: 128.51, y: 78.2))
            shape3.addCurve(to: CGPoint(x: 143.18, y: 65.64), controlPoint1: CGPoint(x: 136.31, y: 73.43), controlPoint2: CGPoint(x: 139.85, y: 69.64))
            shape3.addCurve(to: CGPoint(x: 150.37, y: 54.61), controlPoint1: CGPoint(x: 146, y: 62.25), controlPoint2: CGPoint(x: 148.43, y: 58.58))
            shape3.close()
            shape3.move(to: CGPoint(x: 150.37, y: 54.61))
            context.saveGState()
            context.translateBy(x: 0, y: 45)
            context.saveGState()
            shape3.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor(hue: 0.763, saturation: 1, brightness: 0.663, alpha: 1).cgColor,
                        UIColor(hue: 0.765, saturation: 0.994, brightness: 0.663, alpha: 1).cgColor,
                        UIColor(hue: 0.773, saturation: 0.982, brightness: 0.655, alpha: 1).cgColor,
                        UIColor(hue: 0.789, saturation: 0.957, brightness: 0.643, alpha: 1).cgColor,
                        UIColor(hue: 0.813, saturation: 0.925, brightness: 0.627, alpha: 1).cgColor,
                        UIColor(hue: 0.847, saturation: 0.886, brightness: 0.655, alpha: 1).cgColor,
                        UIColor(hue: 0.881, saturation: 0.864, brightness: 0.776, alpha: 1).cgColor,
                        UIColor(hue: 0.912, saturation: 0.843, brightness: 0.922, alpha: 1).cgColor,
                        UIColor(hue: 0.914, saturation: 0.84, brightness: 0.933, alpha: 1).cgColor,
                    ] as CFArray, locations: [0, 0.29, 0.46, 0.59, 0.71, 0.81, 0.9, 0.99, 1])!,
                start: CGPoint(x: -0, y: 68),
                end: CGPoint(x: 155, y: 68),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawWavyBG(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 500, height: 434), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 500, height: 434), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 500, y: resizedFrame.height / 434)
        
        /// BG
        do {
            context.saveGState()
            
            /// bg
            do {
                context.saveGState()
                context.translateBy(x: 250.35, y: 196.57)
                context.rotate(by: 361 * CGFloat.pi/180)
                context.translateBy(x: -246, y: -191.5)
                
                /// Path 2
                let path2 = UIBezierPath()
                path2.move(to: CGPoint(x: 4.95, y: 66))
                path2.addCurve(to: CGPoint(x: 63.95, y: 100), controlPoint1: CGPoint(x: 4.95, y: 66), controlPoint2: CGPoint(x: 21.95, y: 99))
                path2.addCurve(to: CGPoint(x: 131.95, y: 71), controlPoint1: CGPoint(x: 105.95, y: 101), controlPoint2: CGPoint(x: 102.95, y: 87))
                path2.addCurve(to: CGPoint(x: 219.45, y: 47), controlPoint1: CGPoint(x: 160.95, y: 55), controlPoint2: CGPoint(x: 184.45, y: 47))
                path2.addCurve(to: CGPoint(x: 344.95, y: 38), controlPoint1: CGPoint(x: 254.45, y: 47), controlPoint2: CGPoint(x: 302.95, y: 68))
                path2.addCurve(to: CGPoint(x: 432.95, y: 0), controlPoint1: CGPoint(x: 386.95, y: 8), controlPoint2: CGPoint(x: 432.95, y: 0))
                path2.addLine(to: CGPoint(x: 441.52, y: 382.99))
                path2.addLine(to: CGPoint(x: 0, y: 350.99))
                path2.addLine(to: CGPoint(x: 4.95, y: 66))
                path2.close()
                path2.move(to: CGPoint(x: 4.95, y: 66))
                context.saveGState()
                context.setAlpha(0.4)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.translateBy(x: 50.05, y: 0)
                    path2.usesEvenOddFillRule = true
                    context.saveGState()
                    path2.addClip()
                    context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                                UIColor(hue: 0.764, saturation: 0.994, brightness: 0.663, alpha: 1).cgColor,
                                UIColor(hue: 0.764, saturation: 1, brightness: 0.663, alpha: 1).cgColor,
                            ] as CFArray, locations: [0, 1])!,
                        start: CGPoint(x: 296.04, y: 0),
                        end: CGPoint(x: 144.56, y: 382.99),
                        options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                /// Path 2 Copy
                let path2Copy = UIBezierPath()
                path2Copy.move(to: CGPoint(x: 55.53, y: 48.2))
                path2Copy.addCurve(to: CGPoint(x: 11.56, y: 80.09), controlPoint1: CGPoint(x: 55.53, y: 48.2), controlPoint2: CGPoint(x: -30.44, y: 78.93))
                path2Copy.addCurve(to: CGPoint(x: 145.56, y: 39.09), controlPoint1: CGPoint(x: 53.56, y: 81.24), controlPoint2: CGPoint(x: 89.59, y: 33.62))
                path2Copy.addCurve(to: CGPoint(x: 244.17, y: 49.87), controlPoint1: CGPoint(x: 201.53, y: 44.56), controlPoint2: CGPoint(x: 209.17, y: 49.87))
                path2Copy.addCurve(to: CGPoint(x: 353.56, y: 8.09), controlPoint1: CGPoint(x: 279.17, y: 49.87), controlPoint2: CGPoint(x: 306.56, y: 30.04))
                path2Copy.addCurve(to: CGPoint(x: 485.53, y: 15.84), controlPoint1: CGPoint(x: 400.56, y: -13.87), controlPoint2: CGPoint(x: 485.53, y: 15.84))
                path2Copy.addLine(to: CGPoint(x: 490.53, y: 310.53))
                path2Copy.addLine(to: CGPoint(x: 49.53, y: 308.22))
                path2Copy.addLine(to: CGPoint(x: 55.53, y: 48.2))
                path2Copy.close()
                path2Copy.move(to: CGPoint(x: 55.53, y: 48.2))
                context.saveGState()
                context.setAlpha(0.4)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.translateBy(x: -0, y: 29.89)
                    path2Copy.usesEvenOddFillRule = true
                    context.saveGState()
                    path2Copy.addClip()
                    context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                                UIColor(hue: 0.763, saturation: 1, brightness: 0.663, alpha: 1).cgColor,
                                UIColor(hue: 0.764, saturation: 0.994, brightness: 0.663, alpha: 1).cgColor,
                            ] as CFArray, locations: [0, 1])!,
                        start: CGPoint(x: 83.87, y: -44.22),
                        end: CGPoint(x: 397.01, y: 264.61),
                        options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// bg copy
            context.saveGState()
            context.setAlpha(0.4)
            context.setBlendMode(.multiply)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 250.21, y: 217.26)
                context.rotate(by: 361 * CGFloat.pi/180)
                context.translateBy(x: -246, y: -212)
                
                /// Path 2
                let path4 = UIBezierPath()
                path4.move(to: CGPoint(x: 4.95, y: 66))
                path4.addCurve(to: CGPoint(x: 63.95, y: 100), controlPoint1: CGPoint(x: 4.95, y: 66), controlPoint2: CGPoint(x: 21.95, y: 99))
                path4.addCurve(to: CGPoint(x: 131.95, y: 71), controlPoint1: CGPoint(x: 105.95, y: 101), controlPoint2: CGPoint(x: 102.95, y: 87))
                path4.addCurve(to: CGPoint(x: 219.45, y: 47), controlPoint1: CGPoint(x: 160.95, y: 55), controlPoint2: CGPoint(x: 184.45, y: 47))
                path4.addCurve(to: CGPoint(x: 344.95, y: 38), controlPoint1: CGPoint(x: 254.45, y: 47), controlPoint2: CGPoint(x: 302.95, y: 68))
                path4.addCurve(to: CGPoint(x: 432.95, y: 0), controlPoint1: CGPoint(x: 386.95, y: 8), controlPoint2: CGPoint(x: 432.95, y: 0))
                path4.addLine(to: CGPoint(x: 441, y: 352.99))
                path4.addLine(to: CGPoint(x: 0, y: 350.99))
                path4.addLine(to: CGPoint(x: 4.95, y: 66))
                path4.close()
                path4.move(to: CGPoint(x: 4.95, y: 66))
                context.saveGState()
                context.setAlpha(0.16)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.translateBy(x: 50.05, y: 0)
                    path4.usesEvenOddFillRule = true
                    context.saveGState()
                    path4.addClip()
                    context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                                UIColor(hue: 0.764, saturation: 0.994, brightness: 0.663, alpha: 1).cgColor,
                                UIColor(hue: 0.764, saturation: 1, brightness: 0.663, alpha: 1).cgColor,
                            ] as CFArray, locations: [0, 1])!,
                        start: CGPoint(x: 75.4, y: -50.26),
                        end: CGPoint(x: 356.92, y: 300.8),
                        options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
                
                /// Path 2 Copy
                let path2Copy2 = UIBezierPath()
                path2Copy2.move(to: CGPoint(x: 55.53, y: 61.18))
                path2Copy2.addCurve(to: CGPoint(x: 11.56, y: 101.64), controlPoint1: CGPoint(x: 55.53, y: 61.18), controlPoint2: CGPoint(x: -30.44, y: 100.17))
                path2Copy2.addCurve(to: CGPoint(x: 145.56, y: 49.61), controlPoint1: CGPoint(x: 53.56, y: 103.11), controlPoint2: CGPoint(x: 89.59, y: 42.66))
                path2Copy2.addCurve(to: CGPoint(x: 244.17, y: 63.29), controlPoint1: CGPoint(x: 201.53, y: 56.55), controlPoint2: CGPoint(x: 209.17, y: 63.29))
                path2Copy2.addCurve(to: CGPoint(x: 353.56, y: 10.26), controlPoint1: CGPoint(x: 279.17, y: 63.29), controlPoint2: CGPoint(x: 306.56, y: 38.13))
                path2Copy2.addCurve(to: CGPoint(x: 485.53, y: 20.11), controlPoint1: CGPoint(x: 400.56, y: -17.6), controlPoint2: CGPoint(x: 485.53, y: 20.11))
                path2Copy2.addLine(to: CGPoint(x: 490.53, y: 394.11))
                path2Copy2.addLine(to: CGPoint(x: 49.53, y: 391.17))
                path2Copy2.addLine(to: CGPoint(x: 55.53, y: 61.18))
                path2Copy2.close()
                path2Copy2.move(to: CGPoint(x: 55.53, y: 61.18))
                context.saveGState()
                context.setAlpha(0.16)
                context.beginTransparencyLayer(auxiliaryInfo: nil)
                do {
                    context.translateBy(x: -0, y: 29.89)
                    path2Copy2.usesEvenOddFillRule = true
                    context.saveGState()
                    path2Copy2.addClip()
                    context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                                UIColor(hue: 0.68, saturation: 0.962, brightness: 0.548, alpha: 1).cgColor,
                                UIColor(hue: 0.766, saturation: 0.994, brightness: 0.663, alpha: 1).cgColor,
                            ] as CFArray, locations: [0, 1])!,
                        start: CGPoint(x: 83.87, y: -56.12),
                        end: CGPoint(x: 397.01, y: 335.83),
                        options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                    context.restoreGState()
                }
                context.endTransparencyLayer()
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    class func drawCreateAccButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 290, height: 50), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 290, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 290, y: resizedFrame.height / 50)
        
        /// Slack button
        do {
            context.saveGState()
            
            /// Rectangle 2
            let rectangle2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 290, height: 50), cornerRadius: 30)
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(rectangle2.cgPath)
            context.addRect(rectangle2.bounds.insetBy(dx: -29, dy: -31))
            context.clip(using: .evenOdd)
            context.translateBy(x: -320, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 330, y: 12)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 19 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 1, saturation: 0.624, brightness: 1, alpha: 0.2).cgColor)
            }
            UIColor.black.setFill()
            rectangle2.fill()
            context.restoreGState()
            UIColor.white.setFill()
            rectangle2.fill()
            context.restoreGState()
            
            /// Create an account
            let createAnAccount = NSMutableAttributedString(string: "Create an account")
            createAnAccount.addAttribute(.font, value: UIFont(name: "OpenSans", size: 16)!, range: NSRange(location: 0, length: createAnAccount.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                createAnAccount.addAttribute(.paragraphStyle, value: paragraphStyle, range: NSRange(location: 0, length: createAnAccount.length))
            }
            createAnAccount.addAttribute(.foregroundColor, value: UIColor(hue: 0.791, saturation: 0, brightness: 0.29, alpha: 1), range: NSRange(location: 0, length: createAnAccount.length))
            context.saveGState()
            createAnAccount.draw(in: CGRect(x: 71, y: 14, width: 148.5, height: 25))
            context.restoreGState()
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Symbols
    
    class func imageOfIllustrationEmpty() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 96, height: 91), false, 0)
        UI_Pactr.drawIllustrationEmpty()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfNewButton() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 60, height: 60), false, 0)
        UI_Pactr.drawNewButton()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfNextStepButton() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 375, height: 60), false, 0)
        UI_Pactr.drawNextStepButton()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfAddAvatar() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 52, height: 52), false, 0)
        UI_Pactr.drawAddAvatar()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfLabel() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 43, height: 19), false, 0)
        UI_Pactr.drawLabel()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTitleH1() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 218, height: 25), false, 0)
        UI_Pactr.drawTitleH1()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfTextField() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 335, height: 68), false, 0)
        UI_Pactr.drawTextField()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfPactr_Logo() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 158, height: 181), false, 0)
        UI_Pactr.drawPactr_Logo()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfWavyBG() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 500, height: 434), false, 0)
        UI_Pactr.drawWavyBG()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfCreateAccButton() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 290, height: 50), false, 0)
        UI_Pactr.drawCreateAccButton()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
